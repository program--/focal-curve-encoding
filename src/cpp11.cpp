// Generated by cpp11: do not edit by hand
// clang-format off


#include "cpp11/declarations.hpp"
#include <R_ext/Visibility.h>

// fce.cpp
cpp11::list FCE_encode_(cpp11::doubles x, cpp11::doubles y, size_t         n, double         xmin, double         xmax, double         ymin, double         ymax);
extern "C" SEXP _fce_FCE_encode_(SEXP x, SEXP y, SEXP n, SEXP xmin, SEXP xmax, SEXP ymin, SEXP ymax) {
  BEGIN_CPP11
    return cpp11::as_sexp(FCE_encode_(cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(x), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(y), cpp11::as_cpp<cpp11::decay_t<size_t        >>(n), cpp11::as_cpp<cpp11::decay_t<double        >>(xmin), cpp11::as_cpp<cpp11::decay_t<double        >>(xmax), cpp11::as_cpp<cpp11::decay_t<double        >>(ymin), cpp11::as_cpp<cpp11::decay_t<double        >>(ymax)));
  END_CPP11
}

extern "C" {
/* .Call calls */
extern SEXP run_testthat_tests(void *);

static const R_CallMethodDef CallEntries[] = {
    {"_fce_FCE_encode_",   (DL_FUNC) &_fce_FCE_encode_,   7},
    {"run_testthat_tests", (DL_FUNC) &run_testthat_tests, 1},
    {NULL, NULL, 0}
};
}

extern "C" attribute_visible void R_init_fce(DllInfo* dll){
  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
  R_forceSymbols(dll, TRUE);
}
